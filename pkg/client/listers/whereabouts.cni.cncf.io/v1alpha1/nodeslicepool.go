/*
Copyright 2024 The Kubernetes Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/k8snetworkplumbingwg/whereabouts/pkg/api/whereabouts.cni.cncf.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeSlicePoolLister helps list NodeSlicePools.
// All objects returned here must be treated as read-only.
type NodeSlicePoolLister interface {
	// List lists all NodeSlicePools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodeSlicePool, err error)
	// NodeSlicePools returns an object that can list and get NodeSlicePools.
	NodeSlicePools(namespace string) NodeSlicePoolNamespaceLister
	NodeSlicePoolListerExpansion
}

// nodeSlicePoolLister implements the NodeSlicePoolLister interface.
type nodeSlicePoolLister struct {
	indexer cache.Indexer
}

// NewNodeSlicePoolLister returns a new NodeSlicePoolLister.
func NewNodeSlicePoolLister(indexer cache.Indexer) NodeSlicePoolLister {
	return &nodeSlicePoolLister{indexer: indexer}
}

// List lists all NodeSlicePools in the indexer.
func (s *nodeSlicePoolLister) List(selector labels.Selector) (ret []*v1alpha1.NodeSlicePool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeSlicePool))
	})
	return ret, err
}

// NodeSlicePools returns an object that can list and get NodeSlicePools.
func (s *nodeSlicePoolLister) NodeSlicePools(namespace string) NodeSlicePoolNamespaceLister {
	return nodeSlicePoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeSlicePoolNamespaceLister helps list and get NodeSlicePools.
// All objects returned here must be treated as read-only.
type NodeSlicePoolNamespaceLister interface {
	// List lists all NodeSlicePools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodeSlicePool, err error)
	// Get retrieves the NodeSlicePool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NodeSlicePool, error)
	NodeSlicePoolNamespaceListerExpansion
}

// nodeSlicePoolNamespaceLister implements the NodeSlicePoolNamespaceLister
// interface.
type nodeSlicePoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeSlicePools in the indexer for a given namespace.
func (s nodeSlicePoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NodeSlicePool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeSlicePool))
	})
	return ret, err
}

// Get retrieves the NodeSlicePool from the indexer for a given namespace and name.
func (s nodeSlicePoolNamespaceLister) Get(name string) (*v1alpha1.NodeSlicePool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nodeslicepool"), name)
	}
	return obj.(*v1alpha1.NodeSlicePool), nil
}
