/*
Copyright 2025 The Kubernetes Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/k8snetworkplumbingwg/whereabouts/pkg/api/whereabouts.cni.cncf.io/v1alpha1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/listers"
	"k8s.io/client-go/tools/cache"
)

// OverlappingRangeIPReservationLister helps list OverlappingRangeIPReservations.
// All objects returned here must be treated as read-only.
type OverlappingRangeIPReservationLister interface {
	// List lists all OverlappingRangeIPReservations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OverlappingRangeIPReservation, err error)
	// OverlappingRangeIPReservations returns an object that can list and get OverlappingRangeIPReservations.
	OverlappingRangeIPReservations(namespace string) OverlappingRangeIPReservationNamespaceLister
	OverlappingRangeIPReservationListerExpansion
}

// overlappingRangeIPReservationLister implements the OverlappingRangeIPReservationLister interface.
type overlappingRangeIPReservationLister struct {
	listers.ResourceIndexer[*v1alpha1.OverlappingRangeIPReservation]
}

// NewOverlappingRangeIPReservationLister returns a new OverlappingRangeIPReservationLister.
func NewOverlappingRangeIPReservationLister(indexer cache.Indexer) OverlappingRangeIPReservationLister {
	return &overlappingRangeIPReservationLister{listers.New[*v1alpha1.OverlappingRangeIPReservation](indexer, v1alpha1.Resource("overlappingrangeipreservation"))}
}

// OverlappingRangeIPReservations returns an object that can list and get OverlappingRangeIPReservations.
func (s *overlappingRangeIPReservationLister) OverlappingRangeIPReservations(namespace string) OverlappingRangeIPReservationNamespaceLister {
	return overlappingRangeIPReservationNamespaceLister{listers.NewNamespaced[*v1alpha1.OverlappingRangeIPReservation](s.ResourceIndexer, namespace)}
}

// OverlappingRangeIPReservationNamespaceLister helps list and get OverlappingRangeIPReservations.
// All objects returned here must be treated as read-only.
type OverlappingRangeIPReservationNamespaceLister interface {
	// List lists all OverlappingRangeIPReservations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OverlappingRangeIPReservation, err error)
	// Get retrieves the OverlappingRangeIPReservation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OverlappingRangeIPReservation, error)
	OverlappingRangeIPReservationNamespaceListerExpansion
}

// overlappingRangeIPReservationNamespaceLister implements the OverlappingRangeIPReservationNamespaceLister
// interface.
type overlappingRangeIPReservationNamespaceLister struct {
	listers.ResourceIndexer[*v1alpha1.OverlappingRangeIPReservation]
}
